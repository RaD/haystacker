<?xml version="1.0" encoding="utf-8" standalone="no"?>

<project name="django" default="help">

  <property environment="sysenv"/>

  <property file="project.user.properties"/>
  <property file="project.properties"/>
  <property name="build_to" value="${ant_build_dir}/${project_name}"/>

  <import file="${basedir}/antfarm/macros.xml"/>
  <!--<import file="${basedir}/antfarm/db_mysql.xml"/>-->
  <import file="${basedir}/property_processor.xml"/>

  <record name="${project_name}.antlog.txt" action="start"/>

  <if>
    <os family="windows"/>
    <then>
      <property name="windows" value=""/>
      <property name="python_env_bin" value="${basedir}/env/Scripts/"/>
    </then>
    <else>
      <property name="unix" value=""/>
      <property name="python_env_bin" value="${basedir}/env/bin/"/>
    </else>
  </if>

  <target name="help">
    <echo message="List available commands:"/>
    <echo message="  init      - initializes environment, downloads dependencies;"/>
    <echo message="  update    - update environment, downloads dependencies;"/>
    <echo message="  configure - prepares configuration files;"/>
    <echo message="  deploy    - deployment the project;"/>
    <echo message="  clean     - removes trash and autogenerated files;"/>
    <echo message="  dropenv   - removes virtual environment."/>
    <echo message="    ---    "/>
    <echo message="  db_init         - initialize database;"/>
    <echo message="  db_drop         - drop database;"/>
    <echo message="  db_imp -DF=file - drop database;"/>
    <echo message="  db_exp -DF=file - drop database;"/>
    <echo message="    ---    "/>
    <echo message="  testenv   - initialize test environment;"/>
    <echo message="  testrun   - run test;"/>
    <echo message="  testdrop  - drop test environment;"/>
    <echo message="    ---    "/>
    <echo message="  epydoc    - generate project documentation;"/>
  </target>

  <target name="db_init" depends="configure">
    <if>
      <equals arg1="${db_engine}" arg2="mysql"/>
      <then>
        <mysql_run_sql_as_root path="${basedir}/conf" file="db_mysql_create.sql"/>
      </then>
      <else>
        <echo message="Not implemented yet!"/>
      </else>
    </if>
  </target>

  <target name="db_drop" depends="configure">
    <if>
      <equals arg1="${db_engine}" arg2="mysql"/>
      <then>
        <mysql_run_sql_as_root path="${basedir}/conf" file="db_mysql_drop.sql"/>
      </then>
      <else>
        <echo message="Not implemented yet!"/>
      </else>
    </if>
  </target>

  <target name="init">
    <condition property="no_virtual_environment">
      <not>
        <available file="${python_env_bin}/activate" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="no_virtual_environment"/>
      <then>
        <sequential>
          <echo message="Initialize virtual environment for this project."/>
          <exec executable="virtualenv" failonerror="true">
            <arg line="${basedir}/env"/>
          </exec>
          <echo message="Install PIP into the virtual environment."/>
          <if>
            <equals arg1="${antfarm_quiet}" arg2="True"/>
            <then>
              <exec executable="${python_env_bin}/easy_install" failonerror="true">
                <arg line="-q pip"/>
              </exec>
            </then>
            <else>
              <exec executable="${python_env_bin}/easy_install" failonerror="true">
                <arg line="pip"/>
              </exec>
            </else>
          </if>
          <echo message="Source the virtual environment."/>
          <property name="sysenv.PATH" value="${basedir}/env/lib/python${python_version}/site-packages:%{sysenv.PATH}"/>
          <property name="sysenv.PYTHON_EGG_CACHE" value="${basedir}/env/.python-eggs:%{sysenv.PYTHON_EGG_CACHE}"/>
          <echo message="Install dependencies into the virtual environment. Please wait..."/>
          <if>
            <equals arg1="${antfarm_quiet}" arg2="True"/>
            <then>
              <exec executable="${python_env_bin}/pip" failonerror="true">
                <arg line="install -q -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </then>
            <else>
              <exec executable="${python_env_bin}/pip" failonerror="true">
                <arg line="install -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </else>
          </if>
          <echo message="Source environment with: . ${python_env_bin}/activate"/>
          <echo message="Use deactivate to disable virtual environment."/>
        </sequential>
      </then>
    </if>
  </target>

  <target name="update">
    <condition property="no_pip">
      <not>
        <or>
	  <available file="${python_env_bin}/pip" type="file"/>
          <available file="${python_env_bin}/pip.exe" type="file"/>
        </or>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="no_pip"/>
      <then>
        <fail message="Please, initialize virtual environment first."/>
      </then>
      <else>
        <sequential>
          <echo message="Source the virtual environment."/>
          <property name="sysenv.PATH" value="${basedir}/env/lib/python${python_version}/site-packages:%{sysenv.PATH}"/>
          <property name="sysenv.PYTHON_EGG_CACHE" value="${basedir}/env/.python-eggs:%{sysenv.PYTHON_EGG_CACHE}"/>
          <echo message="Update dependencies in the virtual environment. Please wait..."/>
          <if>
            <equals arg1="${antfarm_quiet}" arg2="True"/>
            <then>
              <exec executable="${python_env_bin}/pip" failonerror="true">
                <arg line="install -q -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </then>
            <else>
              <exec executable="${python_env_bin}/pip" failonerror="true">
                <arg line="install -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </else>
          </if>
          <echo message="Source environment with: . ${python_env_bin}/activate"/>
          <echo message="Use deactivate to disable virtual environment."/>
        </sequential>
      </else>
    </if>
  </target>

  <target name="configure">
    <condition property="not_user_configuration">
      <not>
        <available file="${basedir}/project.user.properties" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="not_user_configuration"/>
      <then>
        <copy file="${basedir}/tpls/project_user.template"
              tofile="${basedir}/project.user.properties"
              overwrite="false" encoding="utf-8"/>
        <fail message="Please, edit your project.user.properties before any actions!"/>
      </then>
    </if>

    <make_prop_file filename="${basedir}/${cumulative_config}"/>

    <mkdir dir="${basedir}/conf/"/>

    <parse_template src="${basedir}/tpls/logrotate.template"
                    dst="${basedir}/conf/django.logrotate"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/dump_sh.template"
                    dst="${basedir}/conf/dump.sh"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/search.template"
                    dst="${basedir}/conf/search.sh"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/httpd_vhosts.template"
                    dst="${basedir}/conf/httpd-vhosts.conf"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/django_wsgi.template"
                    dst="${basedir}/conf/django.wsgi"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/db_mysql_create.template"
                    dst="${basedir}/conf/db_mysql_create.sql"
                    params="${basedir}/${cumulative_config}"/>
    <parse_template src="${basedir}/tpls/db_mysql_drop.template"
                    dst="${basedir}/conf/db_mysql_drop.sql"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/db_pgsql_create.template"
                    dst="${basedir}/conf/db_pgsql_create.sql"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/django_settings.template"
                    dst="${basedir}/src/settings.py"
                    params="${basedir}/${cumulative_config}"/>

    <if>
      <equals arg1="${db_engine}" arg2="django.db.backends.mysql"/>
      <then>
        <parse_template src="${basedir}/tpls/db_mysql_create.template"
                        dst="${basedir}/conf/db_mysql_create.sql"
                        params="${basedir}/${cumulative_config}"/>

        <parse_template src="${basedir}/tpls/db_mysql_drop.template"
                        dst="${basedir}/conf/db_mysql_drop.sql"
                        params="${basedir}/${cumulative_config}"/>
      </then>
    </if>

    <echo message="Create directories..."/>
    <echo message="mkdir ${logging_dir}"/>
    <!-- <mkdir dir="${logging_dir}"/> -->
  </target>

  <target name="genkey">
    <condition property="no_gpg_db">
      <not>
        <available file="${gpg_homedir}/trustdb.gpg" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="no_gpg_db"/>
      <then>
        <sequential>
          <echo message="Create GPG directory..."/>
          <mkdir dir="${gpg_homedir}"/>
          <chmod file="${gpg_homedir}" type="dir" perm="700"/>
          <echo message="Create GPG keys. This could take some time..."/>
          <exec executable="gpg" failonerror="true">
            <arg line="--homedir=${gpg_homedir} --batch --gen-key ./conf/gen_key.gpg"/>
          </exec>
        </sequential>
      </then>
    </if>
  </target>

  <target name="build">
    <!--
    <echo message="Compile i18n resources"/>
    <exec executable="django-admin.py" dir="${basedir}/src" failonerror="true">
      <arg value="compilemessages"/>
    </exec>
    //-->

    <echo message="Install project into temporary directory"/>
    <delete includeemptydirs="true" quiet="yes">
      <fileset dir="${build_to}"/>
    </delete>
    <mkdir dir="${build_to}"/>
    <copy todir="${build_to}" encoding="utf-8">
      <fileset dir="${basedir}">
        <include name="conf/**/*"/>
        <include name="src/**/*"/>
        <exclude name="src/static/"/>
        <exclude name="src/haystack_index/"/>
        <exclude name="src/media/"/>
        <exclude name="src/database.sqlite"/>
        <exclude name="src/**/*.sh"/>
        <exclude name="src/**/*.bat"/>
        <exclude name="src/**/*.po"/>
        <exclude name="src/**/*.pyc"/>
        <include name="DEPLOY*"/>
        <include name="deps.txt"/>
      </fileset>
    </copy>

    <echo message="Move collected static files into STATIC directory"/>
    <move file="${build_to}/src/static_root" tofile="${build_to}/src/static"/>

    <echo message="Compilation"/>
    <apply dir="${build_to}" failonerror="true" executable="py_compilefiles" osfamily="unix">
      <srcfile/>
      <fileset dir="${build_to}">
        <include name="src/**/*.py"/>
        <exclude name="src/**/migrations/*.py"/>
        <exclude name="src/**/commands/*.py"/>
      </fileset>
    </apply>

    <echo message="Copy settings"/>
    <copy file="${basedir}/src/settings.py"
          tofile="${ant_build_dir}/${project_name}.settings"
          overwrite="true" encoding="utf-8"/>

    <echo message="Remove sources from distribution"/>
    <delete verbose="true">
      <fileset dir="${build_to}/" defaultexcludes="no">
        <include name="src/**/*.py"/>
        <exclude name="src/**/migrations/*.py"/>
        <exclude name="src/**/commands/*.py"/>
      </fileset>
    </delete>
  </target>

  <target name="rsync">
    <echo message="Rsync project using ${hosting_ssh}"/>
    <exec executable="rsync" failonerror="true">
      <arg value="--verbose"/>
      <arg value="--recursive"/>
      <arg value="--update"/>
      <arg value="--rsh=ssh"/>
      <arg value="${build_to}"/>
      <arg value="${hosting_ssh}:${hosting_code_dir}/../"/>
    </exec>
  </target>

  <target name="deploy">
    <echo message="Deployment to ${hosting_ssh}"/>
    <antcall target="clean"/>
    <antcall target="configure"/>
    <antcall target="build"/>
    <antcall target="rsync"/>
    <echo message="Restart web service manually!"/>
  </target>

  <target name="clean">
    <delete verbose="true">
      <fileset dir="." defaultexcludes="no">
        <exclude name="env/**/*"/> <!-- environment -->
        <include name="**/*~"/> <!-- emacs -->
        <include name="**/*.pyc"/> <!-- python -->
      </fileset>
    </delete>
    <delete file="${basedir}/${cumulative_config}" quiet="yes"/>
    <delete file="${basedir}/src/settings.py" quiet="yes"/>
    <delete file="${basedir}/pip-log.txt" quiet="yes"/>
    <delete includeemptydirs="true" quiet="yes">
      <fileset dir="conf"/>
    </delete>
  </target>

  <target name="dropenv">
    <delete dir="env" includeemptydirs="true" quiet="yes"/>
    <delete file="${basedir}/distribute-0.6.10.tar.gz" quiet="yes"/>
  </target>

  <target name="testenv">
    <condition property="no_test_environment">
      <not>
        <available file="${test_dir}/${test_gpg_file}" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="no_test_environment"/>
      <then>
        <sequential>
          <echo message="Initialize test environment."/>
          <copy file="${basedir}/tpls/gpg_genkey.template"
                tofile="${basedir}/conf/gen_key_test.gpg"
                filtering="true" encoding="utf-8" overwrite="true">
            <filterset begintoken="$${" endtoken="}">
              <filter token="gpg_bits" value="${gpg_bits}"/>
              <filter token="gpg_name_real" value="${test_gpg_name}"/>
              <filter token="gpg_name_comment" value="${test_gpg_comment}"/>
              <filter token="gpg_name_email" value="${test_gpg_email}"/>
              <filter token="gpg_passphrase" value="${test_gpg_pass}"/>
            </filterset>
          </copy>
          <echo message="Generate client GPG keyring at ${test_dir}/${test_gpg_homedir}"/>
          <mkdir dir="${test_dir}/${test_gpg_homedir}"/>
          <chmod file="${test_dir}/${test_gpg_homedir}" type="dir" perm="700"/>
          <exec executable="gpg" failonerror="true">
            <arg line="--homedir=${test_dir}/${test_gpg_homedir} --batch --gen-key ${basedir}/conf/gen_key_test.gpg"/>
          </exec>
          <echo message="Export public key into ${test_dir}/${test_gpg_file}"/>
          <exec executable="python" failonerror="true">
            <arg value="-c"/>
            <arg value="import gnupg; g = gnupg.GPG(gnupghome='${test_dir}/${test_gpg_homedir}'); l = g.list_keys(); open('${test_dir}/${test_gpg_file}', 'w').write(g.export_keys(l[0]['keyid']))"/>
          </exec>
        </sequential>
      </then>
    </if>
  </target>

  <target name="testrun">
    <echo message="Run tests."/>
    <exec executable="python" dir="${basedir}/src" failonerror="true">
      <arg value="manage.py"/>
      <arg value="test"/>
      <arg value="profile"/>
    </exec>
  </target>

  <target name="testdrop">
    <delete dir="${test_dir}/${test_gpg_homedir}" includeemptydirs="true" quiet="yes"/>
    <delete file="${test_dir}/${test_gpg_file}" quiet="yes"/>
  </target>

  <target name="epydoc">
    <echo message="Generate project documentation"/>
    <delete dir="${basedir}/epydoc" includeemptydirs="true" quiet="yes"/>
    <exec dir="${basedir}/src" failonerror="true" executable="epydoc" error="/dev/null" osfamily="unix">
      <arg line="--quiet --html -o ${basedir}/epydoc --graph all **/*.py"/>
      <env key="PYTHONPATH" value="${basedir}/env/lib/python${python_version}/site-packages:${env.PATH}"/>
    </exec>
  </target>

</project>
